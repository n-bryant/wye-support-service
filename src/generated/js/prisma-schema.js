module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.0-beta). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateGame {
  count: Int!
}

type AggregateJob {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Game {
  id: ID!
  appid: String!
  name: String!
  developers: String!
  publishers: String!
  genres: String!
  tags: String!
  freeToPlay: Boolean!
  onSale: Boolean!
  discount: Int!
  initialPrice: Int!
  finalPrice: Int!
  userRating: Int!
  playtime2Weeks: Int!
  playtimeForever: Int!
  owners: String!
  logoImageUrl: String!
  heroImageUrl: String!
}

type GameConnection {
  pageInfo: PageInfo!
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  id: ID
  appid: String!
  name: String!
  developers: String!
  publishers: String!
  genres: String!
  tags: String!
  freeToPlay: Boolean!
  onSale: Boolean!
  discount: Int!
  initialPrice: Int!
  finalPrice: Int!
  userRating: Int!
  playtime2Weeks: Int!
  playtimeForever: Int!
  owners: String!
  logoImageUrl: String!
  heroImageUrl: String!
}

type GameEdge {
  node: Game!
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  appid_ASC
  appid_DESC
  name_ASC
  name_DESC
  developers_ASC
  developers_DESC
  publishers_ASC
  publishers_DESC
  genres_ASC
  genres_DESC
  tags_ASC
  tags_DESC
  freeToPlay_ASC
  freeToPlay_DESC
  onSale_ASC
  onSale_DESC
  discount_ASC
  discount_DESC
  initialPrice_ASC
  initialPrice_DESC
  finalPrice_ASC
  finalPrice_DESC
  userRating_ASC
  userRating_DESC
  playtime2Weeks_ASC
  playtime2Weeks_DESC
  playtimeForever_ASC
  playtimeForever_DESC
  owners_ASC
  owners_DESC
  logoImageUrl_ASC
  logoImageUrl_DESC
  heroImageUrl_ASC
  heroImageUrl_DESC
}

type GamePreviousValues {
  id: ID!
  appid: String!
  name: String!
  developers: String!
  publishers: String!
  genres: String!
  tags: String!
  freeToPlay: Boolean!
  onSale: Boolean!
  discount: Int!
  initialPrice: Int!
  finalPrice: Int!
  userRating: Int!
  playtime2Weeks: Int!
  playtimeForever: Int!
  owners: String!
  logoImageUrl: String!
  heroImageUrl: String!
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameWhereInput
  AND: [GameSubscriptionWhereInput!]
  OR: [GameSubscriptionWhereInput!]
  NOT: [GameSubscriptionWhereInput!]
}

input GameUpdateInput {
  appid: String
  name: String
  developers: String
  publishers: String
  genres: String
  tags: String
  freeToPlay: Boolean
  onSale: Boolean
  discount: Int
  initialPrice: Int
  finalPrice: Int
  userRating: Int
  playtime2Weeks: Int
  playtimeForever: Int
  owners: String
  logoImageUrl: String
  heroImageUrl: String
}

input GameUpdateManyMutationInput {
  appid: String
  name: String
  developers: String
  publishers: String
  genres: String
  tags: String
  freeToPlay: Boolean
  onSale: Boolean
  discount: Int
  initialPrice: Int
  finalPrice: Int
  userRating: Int
  playtime2Weeks: Int
  playtimeForever: Int
  owners: String
  logoImageUrl: String
  heroImageUrl: String
}

input GameWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  appid: String
  appid_not: String
  appid_in: [String!]
  appid_not_in: [String!]
  appid_lt: String
  appid_lte: String
  appid_gt: String
  appid_gte: String
  appid_contains: String
  appid_not_contains: String
  appid_starts_with: String
  appid_not_starts_with: String
  appid_ends_with: String
  appid_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  developers: String
  developers_not: String
  developers_in: [String!]
  developers_not_in: [String!]
  developers_lt: String
  developers_lte: String
  developers_gt: String
  developers_gte: String
  developers_contains: String
  developers_not_contains: String
  developers_starts_with: String
  developers_not_starts_with: String
  developers_ends_with: String
  developers_not_ends_with: String
  publishers: String
  publishers_not: String
  publishers_in: [String!]
  publishers_not_in: [String!]
  publishers_lt: String
  publishers_lte: String
  publishers_gt: String
  publishers_gte: String
  publishers_contains: String
  publishers_not_contains: String
  publishers_starts_with: String
  publishers_not_starts_with: String
  publishers_ends_with: String
  publishers_not_ends_with: String
  genres: String
  genres_not: String
  genres_in: [String!]
  genres_not_in: [String!]
  genres_lt: String
  genres_lte: String
  genres_gt: String
  genres_gte: String
  genres_contains: String
  genres_not_contains: String
  genres_starts_with: String
  genres_not_starts_with: String
  genres_ends_with: String
  genres_not_ends_with: String
  tags: String
  tags_not: String
  tags_in: [String!]
  tags_not_in: [String!]
  tags_lt: String
  tags_lte: String
  tags_gt: String
  tags_gte: String
  tags_contains: String
  tags_not_contains: String
  tags_starts_with: String
  tags_not_starts_with: String
  tags_ends_with: String
  tags_not_ends_with: String
  freeToPlay: Boolean
  freeToPlay_not: Boolean
  onSale: Boolean
  onSale_not: Boolean
  discount: Int
  discount_not: Int
  discount_in: [Int!]
  discount_not_in: [Int!]
  discount_lt: Int
  discount_lte: Int
  discount_gt: Int
  discount_gte: Int
  initialPrice: Int
  initialPrice_not: Int
  initialPrice_in: [Int!]
  initialPrice_not_in: [Int!]
  initialPrice_lt: Int
  initialPrice_lte: Int
  initialPrice_gt: Int
  initialPrice_gte: Int
  finalPrice: Int
  finalPrice_not: Int
  finalPrice_in: [Int!]
  finalPrice_not_in: [Int!]
  finalPrice_lt: Int
  finalPrice_lte: Int
  finalPrice_gt: Int
  finalPrice_gte: Int
  userRating: Int
  userRating_not: Int
  userRating_in: [Int!]
  userRating_not_in: [Int!]
  userRating_lt: Int
  userRating_lte: Int
  userRating_gt: Int
  userRating_gte: Int
  playtime2Weeks: Int
  playtime2Weeks_not: Int
  playtime2Weeks_in: [Int!]
  playtime2Weeks_not_in: [Int!]
  playtime2Weeks_lt: Int
  playtime2Weeks_lte: Int
  playtime2Weeks_gt: Int
  playtime2Weeks_gte: Int
  playtimeForever: Int
  playtimeForever_not: Int
  playtimeForever_in: [Int!]
  playtimeForever_not_in: [Int!]
  playtimeForever_lt: Int
  playtimeForever_lte: Int
  playtimeForever_gt: Int
  playtimeForever_gte: Int
  owners: String
  owners_not: String
  owners_in: [String!]
  owners_not_in: [String!]
  owners_lt: String
  owners_lte: String
  owners_gt: String
  owners_gte: String
  owners_contains: String
  owners_not_contains: String
  owners_starts_with: String
  owners_not_starts_with: String
  owners_ends_with: String
  owners_not_ends_with: String
  logoImageUrl: String
  logoImageUrl_not: String
  logoImageUrl_in: [String!]
  logoImageUrl_not_in: [String!]
  logoImageUrl_lt: String
  logoImageUrl_lte: String
  logoImageUrl_gt: String
  logoImageUrl_gte: String
  logoImageUrl_contains: String
  logoImageUrl_not_contains: String
  logoImageUrl_starts_with: String
  logoImageUrl_not_starts_with: String
  logoImageUrl_ends_with: String
  logoImageUrl_not_ends_with: String
  heroImageUrl: String
  heroImageUrl_not: String
  heroImageUrl_in: [String!]
  heroImageUrl_not_in: [String!]
  heroImageUrl_lt: String
  heroImageUrl_lte: String
  heroImageUrl_gt: String
  heroImageUrl_gte: String
  heroImageUrl_contains: String
  heroImageUrl_not_contains: String
  heroImageUrl_starts_with: String
  heroImageUrl_not_starts_with: String
  heroImageUrl_ends_with: String
  heroImageUrl_not_ends_with: String
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
}

input GameWhereUniqueInput {
  id: ID
  appid: String
}

type Job {
  id: ID!
  createdTime: String!
  completedTime: String
  status: JobStatus!
}

type JobConnection {
  pageInfo: PageInfo!
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  id: ID
  createdTime: String!
  completedTime: String
  status: JobStatus!
}

type JobEdge {
  node: Job!
  cursor: String!
}

enum JobOrderByInput {
  id_ASC
  id_DESC
  createdTime_ASC
  createdTime_DESC
  completedTime_ASC
  completedTime_DESC
  status_ASC
  status_DESC
}

type JobPreviousValues {
  id: ID!
  createdTime: String!
  completedTime: String
  status: JobStatus!
}

enum JobStatus {
  RUNNING
  COMPLETE
  ERROR
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobWhereInput
  AND: [JobSubscriptionWhereInput!]
  OR: [JobSubscriptionWhereInput!]
  NOT: [JobSubscriptionWhereInput!]
}

input JobUpdateInput {
  createdTime: String
  completedTime: String
  status: JobStatus
}

input JobUpdateManyMutationInput {
  createdTime: String
  completedTime: String
  status: JobStatus
}

input JobWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdTime: String
  createdTime_not: String
  createdTime_in: [String!]
  createdTime_not_in: [String!]
  createdTime_lt: String
  createdTime_lte: String
  createdTime_gt: String
  createdTime_gte: String
  createdTime_contains: String
  createdTime_not_contains: String
  createdTime_starts_with: String
  createdTime_not_starts_with: String
  createdTime_ends_with: String
  createdTime_not_ends_with: String
  completedTime: String
  completedTime_not: String
  completedTime_in: [String!]
  completedTime_not_in: [String!]
  completedTime_lt: String
  completedTime_lte: String
  completedTime_gt: String
  completedTime_gte: String
  completedTime_contains: String
  completedTime_not_contains: String
  completedTime_starts_with: String
  completedTime_not_starts_with: String
  completedTime_ends_with: String
  completedTime_not_ends_with: String
  status: JobStatus
  status_not: JobStatus
  status_in: [JobStatus!]
  status_not_in: [JobStatus!]
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

input JobWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createGame(data: GameCreateInput!): Game!
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteManyGames(where: GameWhereInput): BatchPayload!
  createJob(data: JobCreateInput!): Job!
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job
  updateManyJobs(data: JobUpdateManyMutationInput!, where: JobWhereInput): BatchPayload!
  upsertJob(where: JobWhereUniqueInput!, create: JobCreateInput!, update: JobUpdateInput!): Job!
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteManyJobs(where: JobWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  game(where: GameWhereUniqueInput!): Game
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job]!
  jobsConnection(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobConnection!
  node(id: ID!): Node
}

type Subscription {
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  job(where: JobSubscriptionWhereInput): JobSubscriptionPayload
}
`
      }
    