// Code generated by Prisma (prisma@1.32.0-beta). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  game: (where?: GameWhereInput) => Promise<boolean>;
  job: (where?: JobWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  game: (where: GameWhereUniqueInput) => GamePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  job: (where: JobWhereUniqueInput) => JobPromise;
  jobs: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Job>;
  jobsConnection: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createJob: (data: JobCreateInput) => JobPromise;
  updateJob: (args: {
    data: JobUpdateInput;
    where: JobWhereUniqueInput;
  }) => JobPromise;
  updateManyJobs: (args: {
    data: JobUpdateManyMutationInput;
    where?: JobWhereInput;
  }) => BatchPayloadPromise;
  upsertJob: (args: {
    where: JobWhereUniqueInput;
    create: JobCreateInput;
    update: JobUpdateInput;
  }) => JobPromise;
  deleteJob: (where: JobWhereUniqueInput) => JobPromise;
  deleteManyJobs: (where?: JobWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  job: (
    where?: JobSubscriptionWhereInput
  ) => JobSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "appid_ASC"
  | "appid_DESC"
  | "name_ASC"
  | "name_DESC"
  | "developers_ASC"
  | "developers_DESC"
  | "publishers_ASC"
  | "publishers_DESC"
  | "genres_ASC"
  | "genres_DESC"
  | "tags_ASC"
  | "tags_DESC"
  | "freeToPlay_ASC"
  | "freeToPlay_DESC"
  | "onSale_ASC"
  | "onSale_DESC"
  | "discount_ASC"
  | "discount_DESC"
  | "initialPrice_ASC"
  | "initialPrice_DESC"
  | "finalPrice_ASC"
  | "finalPrice_DESC"
  | "userRating_ASC"
  | "userRating_DESC"
  | "playtime2Weeks_ASC"
  | "playtime2Weeks_DESC"
  | "playtimeForever_ASC"
  | "playtimeForever_DESC"
  | "owners_ASC"
  | "owners_DESC"
  | "headerImage_ASC"
  | "headerImage_DESC"
  | "backgroundImage_ASC"
  | "backgroundImage_DESC"
  | "broadcastLeftImage_ASC"
  | "broadcastLeftImage_DESC"
  | "broadcastRightImage_ASC"
  | "broadcastRightImage_DESC"
  | "capsuleSm_ASC"
  | "capsuleSm_DESC"
  | "capsuleMd_ASC"
  | "capsuleMd_DESC"
  | "capsuleLg_ASC"
  | "capsuleLg_DESC"
  | "logo_ASC"
  | "logo_DESC"
  | "libraryCapsule_ASC"
  | "libraryCapsule_DESC"
  | "libraryHero_ASC"
  | "libraryHero_DESC";

export type JobStatus = "RUNNING" | "COMPLETE" | "ERROR";

export type JobOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdTime_ASC"
  | "createdTime_DESC"
  | "completedTime_ASC"
  | "completedTime_DESC"
  | "status_ASC"
  | "status_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface JobCreateInput {
  id?: ID_Input;
  createdTime: String;
  completedTime?: String;
  status: JobStatus;
}

export type GameWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  appid?: String;
}>;

export type JobWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GameWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  appid?: String;
  appid_not?: String;
  appid_in?: String[] | String;
  appid_not_in?: String[] | String;
  appid_lt?: String;
  appid_lte?: String;
  appid_gt?: String;
  appid_gte?: String;
  appid_contains?: String;
  appid_not_contains?: String;
  appid_starts_with?: String;
  appid_not_starts_with?: String;
  appid_ends_with?: String;
  appid_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  developers?: String;
  developers_not?: String;
  developers_in?: String[] | String;
  developers_not_in?: String[] | String;
  developers_lt?: String;
  developers_lte?: String;
  developers_gt?: String;
  developers_gte?: String;
  developers_contains?: String;
  developers_not_contains?: String;
  developers_starts_with?: String;
  developers_not_starts_with?: String;
  developers_ends_with?: String;
  developers_not_ends_with?: String;
  publishers?: String;
  publishers_not?: String;
  publishers_in?: String[] | String;
  publishers_not_in?: String[] | String;
  publishers_lt?: String;
  publishers_lte?: String;
  publishers_gt?: String;
  publishers_gte?: String;
  publishers_contains?: String;
  publishers_not_contains?: String;
  publishers_starts_with?: String;
  publishers_not_starts_with?: String;
  publishers_ends_with?: String;
  publishers_not_ends_with?: String;
  genres?: String;
  genres_not?: String;
  genres_in?: String[] | String;
  genres_not_in?: String[] | String;
  genres_lt?: String;
  genres_lte?: String;
  genres_gt?: String;
  genres_gte?: String;
  genres_contains?: String;
  genres_not_contains?: String;
  genres_starts_with?: String;
  genres_not_starts_with?: String;
  genres_ends_with?: String;
  genres_not_ends_with?: String;
  tags?: String;
  tags_not?: String;
  tags_in?: String[] | String;
  tags_not_in?: String[] | String;
  tags_lt?: String;
  tags_lte?: String;
  tags_gt?: String;
  tags_gte?: String;
  tags_contains?: String;
  tags_not_contains?: String;
  tags_starts_with?: String;
  tags_not_starts_with?: String;
  tags_ends_with?: String;
  tags_not_ends_with?: String;
  freeToPlay?: Boolean;
  freeToPlay_not?: Boolean;
  onSale?: Boolean;
  onSale_not?: Boolean;
  discount?: Int;
  discount_not?: Int;
  discount_in?: Int[] | Int;
  discount_not_in?: Int[] | Int;
  discount_lt?: Int;
  discount_lte?: Int;
  discount_gt?: Int;
  discount_gte?: Int;
  initialPrice?: Int;
  initialPrice_not?: Int;
  initialPrice_in?: Int[] | Int;
  initialPrice_not_in?: Int[] | Int;
  initialPrice_lt?: Int;
  initialPrice_lte?: Int;
  initialPrice_gt?: Int;
  initialPrice_gte?: Int;
  finalPrice?: Int;
  finalPrice_not?: Int;
  finalPrice_in?: Int[] | Int;
  finalPrice_not_in?: Int[] | Int;
  finalPrice_lt?: Int;
  finalPrice_lte?: Int;
  finalPrice_gt?: Int;
  finalPrice_gte?: Int;
  userRating?: Int;
  userRating_not?: Int;
  userRating_in?: Int[] | Int;
  userRating_not_in?: Int[] | Int;
  userRating_lt?: Int;
  userRating_lte?: Int;
  userRating_gt?: Int;
  userRating_gte?: Int;
  playtime2Weeks?: Int;
  playtime2Weeks_not?: Int;
  playtime2Weeks_in?: Int[] | Int;
  playtime2Weeks_not_in?: Int[] | Int;
  playtime2Weeks_lt?: Int;
  playtime2Weeks_lte?: Int;
  playtime2Weeks_gt?: Int;
  playtime2Weeks_gte?: Int;
  playtimeForever?: Int;
  playtimeForever_not?: Int;
  playtimeForever_in?: Int[] | Int;
  playtimeForever_not_in?: Int[] | Int;
  playtimeForever_lt?: Int;
  playtimeForever_lte?: Int;
  playtimeForever_gt?: Int;
  playtimeForever_gte?: Int;
  owners?: String;
  owners_not?: String;
  owners_in?: String[] | String;
  owners_not_in?: String[] | String;
  owners_lt?: String;
  owners_lte?: String;
  owners_gt?: String;
  owners_gte?: String;
  owners_contains?: String;
  owners_not_contains?: String;
  owners_starts_with?: String;
  owners_not_starts_with?: String;
  owners_ends_with?: String;
  owners_not_ends_with?: String;
  headerImage?: String;
  headerImage_not?: String;
  headerImage_in?: String[] | String;
  headerImage_not_in?: String[] | String;
  headerImage_lt?: String;
  headerImage_lte?: String;
  headerImage_gt?: String;
  headerImage_gte?: String;
  headerImage_contains?: String;
  headerImage_not_contains?: String;
  headerImage_starts_with?: String;
  headerImage_not_starts_with?: String;
  headerImage_ends_with?: String;
  headerImage_not_ends_with?: String;
  backgroundImage?: String;
  backgroundImage_not?: String;
  backgroundImage_in?: String[] | String;
  backgroundImage_not_in?: String[] | String;
  backgroundImage_lt?: String;
  backgroundImage_lte?: String;
  backgroundImage_gt?: String;
  backgroundImage_gte?: String;
  backgroundImage_contains?: String;
  backgroundImage_not_contains?: String;
  backgroundImage_starts_with?: String;
  backgroundImage_not_starts_with?: String;
  backgroundImage_ends_with?: String;
  backgroundImage_not_ends_with?: String;
  broadcastLeftImage?: String;
  broadcastLeftImage_not?: String;
  broadcastLeftImage_in?: String[] | String;
  broadcastLeftImage_not_in?: String[] | String;
  broadcastLeftImage_lt?: String;
  broadcastLeftImage_lte?: String;
  broadcastLeftImage_gt?: String;
  broadcastLeftImage_gte?: String;
  broadcastLeftImage_contains?: String;
  broadcastLeftImage_not_contains?: String;
  broadcastLeftImage_starts_with?: String;
  broadcastLeftImage_not_starts_with?: String;
  broadcastLeftImage_ends_with?: String;
  broadcastLeftImage_not_ends_with?: String;
  broadcastRightImage?: String;
  broadcastRightImage_not?: String;
  broadcastRightImage_in?: String[] | String;
  broadcastRightImage_not_in?: String[] | String;
  broadcastRightImage_lt?: String;
  broadcastRightImage_lte?: String;
  broadcastRightImage_gt?: String;
  broadcastRightImage_gte?: String;
  broadcastRightImage_contains?: String;
  broadcastRightImage_not_contains?: String;
  broadcastRightImage_starts_with?: String;
  broadcastRightImage_not_starts_with?: String;
  broadcastRightImage_ends_with?: String;
  broadcastRightImage_not_ends_with?: String;
  capsuleSm?: String;
  capsuleSm_not?: String;
  capsuleSm_in?: String[] | String;
  capsuleSm_not_in?: String[] | String;
  capsuleSm_lt?: String;
  capsuleSm_lte?: String;
  capsuleSm_gt?: String;
  capsuleSm_gte?: String;
  capsuleSm_contains?: String;
  capsuleSm_not_contains?: String;
  capsuleSm_starts_with?: String;
  capsuleSm_not_starts_with?: String;
  capsuleSm_ends_with?: String;
  capsuleSm_not_ends_with?: String;
  capsuleMd?: String;
  capsuleMd_not?: String;
  capsuleMd_in?: String[] | String;
  capsuleMd_not_in?: String[] | String;
  capsuleMd_lt?: String;
  capsuleMd_lte?: String;
  capsuleMd_gt?: String;
  capsuleMd_gte?: String;
  capsuleMd_contains?: String;
  capsuleMd_not_contains?: String;
  capsuleMd_starts_with?: String;
  capsuleMd_not_starts_with?: String;
  capsuleMd_ends_with?: String;
  capsuleMd_not_ends_with?: String;
  capsuleLg?: String;
  capsuleLg_not?: String;
  capsuleLg_in?: String[] | String;
  capsuleLg_not_in?: String[] | String;
  capsuleLg_lt?: String;
  capsuleLg_lte?: String;
  capsuleLg_gt?: String;
  capsuleLg_gte?: String;
  capsuleLg_contains?: String;
  capsuleLg_not_contains?: String;
  capsuleLg_starts_with?: String;
  capsuleLg_not_starts_with?: String;
  capsuleLg_ends_with?: String;
  capsuleLg_not_ends_with?: String;
  logo?: String;
  logo_not?: String;
  logo_in?: String[] | String;
  logo_not_in?: String[] | String;
  logo_lt?: String;
  logo_lte?: String;
  logo_gt?: String;
  logo_gte?: String;
  logo_contains?: String;
  logo_not_contains?: String;
  logo_starts_with?: String;
  logo_not_starts_with?: String;
  logo_ends_with?: String;
  logo_not_ends_with?: String;
  libraryCapsule?: String;
  libraryCapsule_not?: String;
  libraryCapsule_in?: String[] | String;
  libraryCapsule_not_in?: String[] | String;
  libraryCapsule_lt?: String;
  libraryCapsule_lte?: String;
  libraryCapsule_gt?: String;
  libraryCapsule_gte?: String;
  libraryCapsule_contains?: String;
  libraryCapsule_not_contains?: String;
  libraryCapsule_starts_with?: String;
  libraryCapsule_not_starts_with?: String;
  libraryCapsule_ends_with?: String;
  libraryCapsule_not_ends_with?: String;
  libraryHero?: String;
  libraryHero_not?: String;
  libraryHero_in?: String[] | String;
  libraryHero_not_in?: String[] | String;
  libraryHero_lt?: String;
  libraryHero_lte?: String;
  libraryHero_gt?: String;
  libraryHero_gte?: String;
  libraryHero_contains?: String;
  libraryHero_not_contains?: String;
  libraryHero_starts_with?: String;
  libraryHero_not_starts_with?: String;
  libraryHero_ends_with?: String;
  libraryHero_not_ends_with?: String;
  AND?: GameWhereInput[] | GameWhereInput;
  OR?: GameWhereInput[] | GameWhereInput;
  NOT?: GameWhereInput[] | GameWhereInput;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GameWhereInput;
  AND?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  OR?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  NOT?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
}

export interface JobWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdTime?: String;
  createdTime_not?: String;
  createdTime_in?: String[] | String;
  createdTime_not_in?: String[] | String;
  createdTime_lt?: String;
  createdTime_lte?: String;
  createdTime_gt?: String;
  createdTime_gte?: String;
  createdTime_contains?: String;
  createdTime_not_contains?: String;
  createdTime_starts_with?: String;
  createdTime_not_starts_with?: String;
  createdTime_ends_with?: String;
  createdTime_not_ends_with?: String;
  completedTime?: String;
  completedTime_not?: String;
  completedTime_in?: String[] | String;
  completedTime_not_in?: String[] | String;
  completedTime_lt?: String;
  completedTime_lte?: String;
  completedTime_gt?: String;
  completedTime_gte?: String;
  completedTime_contains?: String;
  completedTime_not_contains?: String;
  completedTime_starts_with?: String;
  completedTime_not_starts_with?: String;
  completedTime_ends_with?: String;
  completedTime_not_ends_with?: String;
  status?: JobStatus;
  status_not?: JobStatus;
  status_in?: JobStatus[] | JobStatus;
  status_not_in?: JobStatus[] | JobStatus;
  AND?: JobWhereInput[] | JobWhereInput;
  OR?: JobWhereInput[] | JobWhereInput;
  NOT?: JobWhereInput[] | JobWhereInput;
}

export interface JobUpdateManyMutationInput {
  createdTime?: String;
  completedTime?: String;
  status?: JobStatus;
}

export interface GameCreateInput {
  id?: ID_Input;
  appid: String;
  name: String;
  developers: String;
  publishers: String;
  genres: String;
  tags: String;
  freeToPlay: Boolean;
  onSale: Boolean;
  discount: Int;
  initialPrice: Int;
  finalPrice: Int;
  userRating: Int;
  playtime2Weeks: Int;
  playtimeForever: Int;
  owners: String;
  headerImage?: String;
  backgroundImage?: String;
  broadcastLeftImage?: String;
  broadcastRightImage?: String;
  capsuleSm?: String;
  capsuleMd?: String;
  capsuleLg?: String;
  logo?: String;
  libraryCapsule?: String;
  libraryHero?: String;
}

export interface JobUpdateInput {
  createdTime?: String;
  completedTime?: String;
  status?: JobStatus;
}

export interface GameUpdateInput {
  appid?: String;
  name?: String;
  developers?: String;
  publishers?: String;
  genres?: String;
  tags?: String;
  freeToPlay?: Boolean;
  onSale?: Boolean;
  discount?: Int;
  initialPrice?: Int;
  finalPrice?: Int;
  userRating?: Int;
  playtime2Weeks?: Int;
  playtimeForever?: Int;
  owners?: String;
  headerImage?: String;
  backgroundImage?: String;
  broadcastLeftImage?: String;
  broadcastRightImage?: String;
  capsuleSm?: String;
  capsuleMd?: String;
  capsuleLg?: String;
  logo?: String;
  libraryCapsule?: String;
  libraryHero?: String;
}

export interface GameUpdateManyMutationInput {
  appid?: String;
  name?: String;
  developers?: String;
  publishers?: String;
  genres?: String;
  tags?: String;
  freeToPlay?: Boolean;
  onSale?: Boolean;
  discount?: Int;
  initialPrice?: Int;
  finalPrice?: Int;
  userRating?: Int;
  playtime2Weeks?: Int;
  playtimeForever?: Int;
  owners?: String;
  headerImage?: String;
  backgroundImage?: String;
  broadcastLeftImage?: String;
  broadcastRightImage?: String;
  capsuleSm?: String;
  capsuleMd?: String;
  capsuleLg?: String;
  logo?: String;
  libraryCapsule?: String;
  libraryHero?: String;
}

export interface JobSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: JobWhereInput;
  AND?: JobSubscriptionWhereInput[] | JobSubscriptionWhereInput;
  OR?: JobSubscriptionWhereInput[] | JobSubscriptionWhereInput;
  NOT?: JobSubscriptionWhereInput[] | JobSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface JobEdge {
  node: Job;
  cursor: String;
}

export interface JobEdgePromise extends Promise<JobEdge>, Fragmentable {
  node: <T = JobPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobEdgeSubscription
  extends Promise<AsyncIterator<JobEdge>>,
    Fragmentable {
  node: <T = JobSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface JobPreviousValues {
  id: ID_Output;
  createdTime: String;
  completedTime?: String;
  status: JobStatus;
}

export interface JobPreviousValuesPromise
  extends Promise<JobPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdTime: () => Promise<String>;
  completedTime: () => Promise<String>;
  status: () => Promise<JobStatus>;
}

export interface JobPreviousValuesSubscription
  extends Promise<AsyncIterator<JobPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdTime: () => Promise<AsyncIterator<String>>;
  completedTime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<JobStatus>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface JobConnection {
  pageInfo: PageInfo;
  edges: JobEdge[];
}

export interface JobConnectionPromise
  extends Promise<JobConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobEdge>>() => T;
  aggregate: <T = AggregateJobPromise>() => T;
}

export interface JobConnectionSubscription
  extends Promise<AsyncIterator<JobConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JobEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJobSubscription>() => T;
}

export interface Game {
  id: ID_Output;
  appid: String;
  name: String;
  developers: String;
  publishers: String;
  genres: String;
  tags: String;
  freeToPlay: Boolean;
  onSale: Boolean;
  discount: Int;
  initialPrice: Int;
  finalPrice: Int;
  userRating: Int;
  playtime2Weeks: Int;
  playtimeForever: Int;
  owners: String;
  headerImage?: String;
  backgroundImage?: String;
  broadcastLeftImage?: String;
  broadcastRightImage?: String;
  capsuleSm?: String;
  capsuleMd?: String;
  capsuleLg?: String;
  logo?: String;
  libraryCapsule?: String;
  libraryHero?: String;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  appid: () => Promise<String>;
  name: () => Promise<String>;
  developers: () => Promise<String>;
  publishers: () => Promise<String>;
  genres: () => Promise<String>;
  tags: () => Promise<String>;
  freeToPlay: () => Promise<Boolean>;
  onSale: () => Promise<Boolean>;
  discount: () => Promise<Int>;
  initialPrice: () => Promise<Int>;
  finalPrice: () => Promise<Int>;
  userRating: () => Promise<Int>;
  playtime2Weeks: () => Promise<Int>;
  playtimeForever: () => Promise<Int>;
  owners: () => Promise<String>;
  headerImage: () => Promise<String>;
  backgroundImage: () => Promise<String>;
  broadcastLeftImage: () => Promise<String>;
  broadcastRightImage: () => Promise<String>;
  capsuleSm: () => Promise<String>;
  capsuleMd: () => Promise<String>;
  capsuleLg: () => Promise<String>;
  logo: () => Promise<String>;
  libraryCapsule: () => Promise<String>;
  libraryHero: () => Promise<String>;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  appid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  developers: () => Promise<AsyncIterator<String>>;
  publishers: () => Promise<AsyncIterator<String>>;
  genres: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String>>;
  freeToPlay: () => Promise<AsyncIterator<Boolean>>;
  onSale: () => Promise<AsyncIterator<Boolean>>;
  discount: () => Promise<AsyncIterator<Int>>;
  initialPrice: () => Promise<AsyncIterator<Int>>;
  finalPrice: () => Promise<AsyncIterator<Int>>;
  userRating: () => Promise<AsyncIterator<Int>>;
  playtime2Weeks: () => Promise<AsyncIterator<Int>>;
  playtimeForever: () => Promise<AsyncIterator<Int>>;
  owners: () => Promise<AsyncIterator<String>>;
  headerImage: () => Promise<AsyncIterator<String>>;
  backgroundImage: () => Promise<AsyncIterator<String>>;
  broadcastLeftImage: () => Promise<AsyncIterator<String>>;
  broadcastRightImage: () => Promise<AsyncIterator<String>>;
  capsuleSm: () => Promise<AsyncIterator<String>>;
  capsuleMd: () => Promise<AsyncIterator<String>>;
  capsuleLg: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  libraryCapsule: () => Promise<AsyncIterator<String>>;
  libraryHero: () => Promise<AsyncIterator<String>>;
}

export interface GamePreviousValues {
  id: ID_Output;
  appid: String;
  name: String;
  developers: String;
  publishers: String;
  genres: String;
  tags: String;
  freeToPlay: Boolean;
  onSale: Boolean;
  discount: Int;
  initialPrice: Int;
  finalPrice: Int;
  userRating: Int;
  playtime2Weeks: Int;
  playtimeForever: Int;
  owners: String;
  headerImage?: String;
  backgroundImage?: String;
  broadcastLeftImage?: String;
  broadcastRightImage?: String;
  capsuleSm?: String;
  capsuleMd?: String;
  capsuleLg?: String;
  logo?: String;
  libraryCapsule?: String;
  libraryHero?: String;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  appid: () => Promise<String>;
  name: () => Promise<String>;
  developers: () => Promise<String>;
  publishers: () => Promise<String>;
  genres: () => Promise<String>;
  tags: () => Promise<String>;
  freeToPlay: () => Promise<Boolean>;
  onSale: () => Promise<Boolean>;
  discount: () => Promise<Int>;
  initialPrice: () => Promise<Int>;
  finalPrice: () => Promise<Int>;
  userRating: () => Promise<Int>;
  playtime2Weeks: () => Promise<Int>;
  playtimeForever: () => Promise<Int>;
  owners: () => Promise<String>;
  headerImage: () => Promise<String>;
  backgroundImage: () => Promise<String>;
  broadcastLeftImage: () => Promise<String>;
  broadcastRightImage: () => Promise<String>;
  capsuleSm: () => Promise<String>;
  capsuleMd: () => Promise<String>;
  capsuleLg: () => Promise<String>;
  logo: () => Promise<String>;
  libraryCapsule: () => Promise<String>;
  libraryHero: () => Promise<String>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  appid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  developers: () => Promise<AsyncIterator<String>>;
  publishers: () => Promise<AsyncIterator<String>>;
  genres: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String>>;
  freeToPlay: () => Promise<AsyncIterator<Boolean>>;
  onSale: () => Promise<AsyncIterator<Boolean>>;
  discount: () => Promise<AsyncIterator<Int>>;
  initialPrice: () => Promise<AsyncIterator<Int>>;
  finalPrice: () => Promise<AsyncIterator<Int>>;
  userRating: () => Promise<AsyncIterator<Int>>;
  playtime2Weeks: () => Promise<AsyncIterator<Int>>;
  playtimeForever: () => Promise<AsyncIterator<Int>>;
  owners: () => Promise<AsyncIterator<String>>;
  headerImage: () => Promise<AsyncIterator<String>>;
  backgroundImage: () => Promise<AsyncIterator<String>>;
  broadcastLeftImage: () => Promise<AsyncIterator<String>>;
  broadcastRightImage: () => Promise<AsyncIterator<String>>;
  capsuleSm: () => Promise<AsyncIterator<String>>;
  capsuleMd: () => Promise<AsyncIterator<String>>;
  capsuleLg: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  libraryCapsule: () => Promise<AsyncIterator<String>>;
  libraryHero: () => Promise<AsyncIterator<String>>;
}

export interface Job {
  id: ID_Output;
  createdTime: String;
  completedTime?: String;
  status: JobStatus;
}

export interface JobPromise extends Promise<Job>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdTime: () => Promise<String>;
  completedTime: () => Promise<String>;
  status: () => Promise<JobStatus>;
}

export interface JobSubscription
  extends Promise<AsyncIterator<Job>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdTime: () => Promise<AsyncIterator<String>>;
  completedTime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<JobStatus>>;
}

export interface AggregateJob {
  count: Int;
}

export interface AggregateJobPromise
  extends Promise<AggregateJob>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobSubscription
  extends Promise<AsyncIterator<AggregateJob>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JobSubscriptionPayload {
  mutation: MutationType;
  node: Job;
  updatedFields: String[];
  previousValues: JobPreviousValues;
}

export interface JobSubscriptionPayloadPromise
  extends Promise<JobSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobPreviousValuesPromise>() => T;
}

export interface JobSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "JobStatus",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  },
  {
    name: "Job",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
